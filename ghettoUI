#!/usr/bin/env python
# encoding: utf-8
"""
ghettoUI.py

Interactive frontend for the ghettoVCB and 
ghettoVCB-restore scripts.

Copyright (C) 2011 by Frank Schroeder

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import sys
import os
import re
import time
from tempfile import mkstemp
from datetime import datetime

version = "0.1"

class Backup:
	def __init__(self):
		self.name = ""
		self.datastore = ""
		self.datetime = ""
		self.status = ""
		self.backupdir = ""

	def __str__(self):
		return "{name=%s, datastore=%s, backupdir=%s, datetime=%s, status=%s}" % \
			(self.name, self.datastore, self.backupdir, self.datetime, self.status)

	def __repr__(self):
	    return self.__str__()

class Datastore:
	def __init__(self):
		self.name = ""
		self.url = ""
		self.type = ""
		self.capacity = 0
		self.freeSpace = 0
		self.accessible = False

	def __str__(self):
		return "{name=%s, url=%s, type=%s, capacity=%d, freeSpace=%d, accessible=%s}" % \
			(self.name, self.url, self.type, self.capacity, self.freeSpace, self.accessible)

	def __repr__(self):
	    return self.__str__()
		

class VM:
	def __init__(self):
		self.vmid = -1
		self.name = ''
		self.datastore = ''
		self.vmxFile = ''
		self.guestOS = ''
		self.version = ''
		self.annotation = ''
		
	def __str__(self):
		return "{vmid=%s, name='%s', datastore=%s, vmxFile='%s', guestOS=%s, version=%s}" % \
			(self.vmid, self.name, self.datastore, self.vmxFile, self.guestOS, self.version)
	
	def __repr__(self):
	    return self.__str__()
	

class VimCmd:
	def vimcmd(self, arg):
		return os.popen("/bin/vim-cmd %s" % arg)
		
	def getDatastores(self):
		"""
		Determines the list of configured datastores.
		
		Returns a list of Datastore instances.
		"""
		f = self.vimcmd("hostsvc/datastore/listsummary")
		datastores = []
		for line in f:
			m = re.search(r'name = "(.*)",', line)
			if m:
				datastore = Datastore()
				datastores.append(datastore)
				datastore.name = m.group(1)
				
			m = re.search(r'url = "(.*)",', line);
			if m:
				datastore.url = m.group(1)

			m = re.search(r'capacity = (\d+),', line);
			if m:
				datastore.capacity = int(m.group(1))

			m = re.search(r'freeSpace = (\d+),', line);
			if m:
				datastore.freeSpace = int(m.group(1))

			m = re.search(r'accessible = (true|false),', line);
			if m:
				datastore.accessible = (m.group(1) == "true")

			m = re.search(r'type = "(.*)",', line)
			if m:
				datastore.type = m.group(1)

		return datastores

	def getVMs(self):
		"""
		Determines the list of virtual machines in the 
		inventory of the host and returns a list of 
		VM instances.
		"""
		vms = []
		s = self.vimcmd("vmsvc/getallvms")
		for line in s:
			l = re.findall(r"(\d+)\s+(.+\w)\s+\[(\w+)\]\s+(.*\.vmx)\s+(\w+Guest)\s+(vmx-\d+)\s+(.*)\n", line)
			if (len(l) == 0):
				continue
			x = l[0]
			
			vm = VM()
			vm.vmid = x[0]
			vm.name = x[1]
			vm.datastore = x[2]
			vm.vmxFile = x[3]
			vm.guestOS = x[4]
			vm.version = x[5]
			vm.annotation = x[6]
			vms.append(vm)
			
		return vms

class Menu:
	def header(self):
		# os.system("/bin/sh -c clear");
		print
		print "ghettoVCB Menu %s" % (version)
		print "------------------"
		print
			
	def show(self, prompt, returnPrompt, options):
		while True:
			# clear screen and show header
			self.header()
			
			print prompt
			print

			# print the menu
			i = 0
			for m in options:
				i += 1
				print "%d. %s" % (i, m[1])
	
			# print the return prompt
			if returnPrompt != None:
				print
				print "Q. " + returnPrompt
	
			# read the input and return the response
			try:
				print 
				answer = raw_input("> ");
				if returnPrompt != None and (answer == "q" or answer == "Q"):
					return None
				elif int(answer) in range(1, i+1):
					return options[int(answer)-1][0]
			except:
				pass

	def yesno(self, prompt):
		options = [("yes", "Yes"), ("no", "No")]
		return self.show(prompt, None, options)
		
class GhettoVCB:
	"""
	Wrapper class for the ghettoVCB.sh and ghettoVCB-restore.sh
	scripts. Creates the temporary configuration files and
	run the scripts.
	"""
	
	def __init__(self):
		self.scriptdir = os.path.abspath(os.path.dirname(__file__))
		
		
	def logfile(self, name, postfix):
		now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
		logdir = "%s/LOGS" % self.scriptdir
		logfile = "%s/%s-%s-%s.log" % (logdir, name, postfix, now)
		try:
			os.mkdir(logdir, 0777)
		except OSError:
			pass
			
		return logfile
		
	
	def backup(self, vm, datastore, debugLevel):
		(f, vmfile) = mkstemp(".tmp", "ghettoVCB-vm-")
		os.write(f, vm.name)
		os.write(f, "\n")
		os.close(f)
		
		(f, conffile) = mkstemp(".tmp", "ghettoVCB-conf-")
		os.write(f, "VM_BACKUP_VOLUME=%s/BACKUPS\n" % datastore.url)
		os.write(f, "DISK_BACKUP_FORMAT=thin\n")
		os.write(f, "VM_BACKUP_ROTATION_COUNT=3\n")
		os.write(f, "POWER_VM_DOWN_BEFORE_BACKUP=0\n")
		os.write(f, "ENABLE_HARD_POWER_OFF=0\n")
		os.write(f, "ITER_TO_WAIT_SHUTDOWN=3\n")
		os.write(f, "POWER_DOWN_TIMEOUT=5\n")
		os.write(f, "ENABLE_COMPRESSION=0\n")
		os.write(f, "ADAPTER_FORMAT=%s\n" % "lsilogic")
		os.write(f, "VM_SNAPSHOT_MEMORY=0\n")
		os.write(f, "VM_SNAPSHOT_QUIESCE=0\n")
		os.write(f, "ENABLE_NON_PERSISTENT_NFS=0\n")
		os.write(f, "UNMOUNT_NFS=0\n")
		os.write(f, "NFS_SERVER=\n")
		os.write(f, "NFS_MOUNT=\n")
		os.write(f, "NFS_LOCAL_NAME=\n")
		os.write(f, "NFS_VM_BACKUP_DIR=\n")
		os.write(f, "SNAPSHOT_TIMEOUT=15\n")
		os.write(f, "EMAIL_LOG=0\n")
		os.write(f, "EMAIL_DEBUG=0\n")
		os.write(f, "EMAIL_SERVER=\n")
		os.write(f, "EMAIL_SERVER_PORT=\n")
		os.write(f, "EMAIL_TO=\n")
		os.write(f, "EMAIL_FROM=\n")
		os.close(f)
		
		logfile = self.logfile(vm.name, "backup")	
		cmdline = "%s/ghettoVCB.sh -f '%s' -g '%s' -l '%s' -d '%s'" % \
			(self.scriptdir, vmfile, conffile, logfile, debugLevel)
		print cmdline
		os.system(cmdline)			
		os.unlink(vmfile)
		os.unlink(conffile)
		pass
		
	def restore(self, backup, datastore):
		(f, restorefile) = mkstemp(".tmp", "ghettoVCB-restore-")
		os.write(f, "\"%s;%s;%d\"\n" % (backup.dir, datastore.url, 3))
		os.close(f)
		
		logfile = self.logfile(backup.name, "restore")	
		cmdline = "%s/ghettoVCB-restore.sh -c '%s' -l '%s'" % \
			(self.scriptdir, restorefile, logfile)
		print cmdline
		os.system(cmdline)			
		os.unlink(restorefile)
		pass


class GhettoUI:

	def selectAction(self):
		options = [
			("backup", "Backup a virtual machine"), 
			("restore", "Restore a virtual machine")
		];
		return Menu().show("What do you want to do?", "Quit", options)
		
	def selectDatastore(self):
		datastores = VimCmd().getDatastores()
		options = []
		for datastore in datastores:
			options.append((datastore, "%s (%s)" % (datastore.name, datastore.type)))
		return Menu().show("Select a datastore", "Return", options)
		
	def selectVm(self):
		vms = VimCmd().getVMs()
		options = []
		for vm in vms:
			options.append((vm, vm.name))
		return Menu().show("Select a virtual machine", "Return", options)		
			
	def backup(self):
		while True:
			vm = self.selectVm()
			if vm == None:
				return
				
			datastore = self.selectDatastore()
			if datastore == None:
				return
				
			options = [
				('info',   'info   - Standard output'),
				('debug',  'debug  - Debug output'),
				('dryrun', 'dryrun - Test only. No backup is performed')
			]
			level = Menu().show("Do you want to backup '%s' onto '%s'?" % \
				(vm.name, datastore.name), "Return", options)
			if level:
				GhettoVCB().backup(vm, datastore, level)
				return
	
	def restore(self):
		while True:
			datastores = VimCmd().getDatastores()		
	 		backups = []
			for datastore in datastores:
				datastorebackupdir = "%s/BACKUPS" % datastore.url
				vms = os.listdir(datastorebackupdir)
				for vm in vms:
					vmbackupdir = "%s/BACKUPS/%s" % (datastore.url, vm)
					dirs = os.listdir(vmbackupdir) 
					for backupdir in dirs: 
						backup = Backup()
						backup.name = vm
						backup.dir = "%s/%s" % (vmbackupdir, backupdir)
						backup.datastore = datastore
						backup.datetime = backupdir
						backups.append(backup)
					
			options = []
			for backup in backups:
				options.append((backup, "%s (%s)" % (backup.name, backup.datetime)))
			
			backup = Menu().show("Select a backup to restore", "Return", options)
			if backup == None:
				return
				
			datastore = self.selectDatastore()
			if datastore == None: 
				return;
				
			yesno = Menu().yesno("Do you want to restore '%s' to '%s'?" % (backup.datetime, datastore.name))
			if yesno == "yes":
				GhettoVCB().restore(backup, datastore)
				return
				
	def run(self):
		while True:
			action = self.selectAction()
			if action == "backup":
				self.backup()
			elif action == "restore":
				self.restore()
			elif action == None:
				return


if __name__ == '__main__':
	GhettoUI().run()

